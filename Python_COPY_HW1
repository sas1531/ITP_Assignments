Python_COPY_HW1

1
print('operation: 5 + 7 = ', 5 + 7)     #Addition operation and result
print(type(5 + 7), 5 + 7)               #Prints the type - this format works for all operations

print('operation: 5 - 7 = ', 5 - 7)     #Subtraction operation and result
print(type(5 - 7), 5 - 7)

print('operation: 5 * 7 = ', 5 * 7)     #Multiplication operation and result
print(type(5 * 7), 5 * 7)

print('operation: 5 / 7 = ', 5 / 7)     #Division operation and result
print(type(5 / 7), 5 / 7)

print('operation: 5 ** 7 = ', 5 ** 7)     #Power operation and result
print(type(5 ** 7), 5 ** 7)


2
number1 = int(float(input('Enter number 1: ')))    # this allows the user to input a float or integer
number2 = int(float(input('Enter number 2: ')))

result_addition = number1 + number2                               # assign result_addition to a calculated value
print("{} + {} = {}".format(number1, number2, result_addition))   # print number 1, operation, number2, equals, result
                                                                      # easy to read formatting
result_subtraction = number1 - number2
print("{} - {} = {}".format(number1, number2, result_subtraction))

result_multiplication = number1 * number2
print("{} * {} = {}".format(number1, number2, result_multiplication))

result_division = number1 / number2
print("{} / {} = {}".format(number1, number2, result_division))

result_power = number1 ** number2
print("{} ** {} = {}".format(number1, number2, result_power))


3.1

number = int(input('Enter Number: '))   # user can input an integer here

if number < 0:                          # block separates out the negative, the block will be skipped if the value is positive
    print('The number is negative')
elif number >= 0:                       # block will run only if the number is 0 or positive, which is everything that skips the first block
    print('The number is positive')


3.2

# CODE FOR 3.2

number = int(input('Enter Number: '))              # user inputs integer here

if number < 0:                                      # block will only run with negative numbers - first sort, all positive number will skip over the entire block
    if number % 2 == 0:                             # A nested if statement that separates even from odd
        print('The number is negative and even')
    else:                                           # else covers all numbers that aren't even - you can also use an elif here and define 'odd'
        print('The number is negative and odd')
elif number >= 0:                                   # block accepts 0 and positive numbers
    if number % 2 == 0:
        print('The number is positive and even')
    else:
        print('The number is positive and odd')


3.3

a # CODE FOR 3.3

import sys                           # imported sys allows us to use variables and functions relating to sys (sys.exit)
number = input('Enter Number: ')

if number.isdigit():                 # isdigit checks if the argument contains digist 0123456789
    number = int(number)             # if isdigit is TRUE then the input is converted from a string to an integer
else:                                # else if isdigit is FALSE sys.exit functions to exit the system and give an output
    sys.exit('Error, the value which was input is not an integer')

if number < 0:
    if number % 2 == 0:                             # see explanation 3.2 for these lines
        print('The number is negative and even')
    else:
        print('The number is negative and odd')
elif number >= 0:
    if number % 2 == 0:
        print('The number is positive and even')
    else:
        print('The number is positive and odd')


4.1

# 4.1 code

n = int(input('Enter number: '))  #input an integer

for j in range(n):                # j is defining the rows in the range, so for 0 in range n we are in the first row j
    line = ''                     # this will print n number of rows
    for i in range(j + 1):        # nested loop to define columns, we know that j is 0 first, but we want to print one item in the first line so we must add 1 to j
        line += '{}'.format('*')  # this ensures the row will print symbol *
    print(line)                   # so we end up in row j, printing j + 1 (which is i) as an *
                                  # now the code repeats until the range of n is satisfied



for j in range(n):                  # See the first explanation for the first three lines
  line = ''
  for i in range (j + 1):
      line += ' {:n}'.format(j)   # this defines the formatting of each row by adjusting the number of columns, the :n limits the number of columns to the range of n,
    print(line)                     # .format(j) defines the numbers in each column as j which is a singular value in the range of n (either 0,1,2,3, or 4)
                                    # the space before {:n} inserts a space between each number, then the line is printed



for j in range(n):                  # See the first explanation for the first three lines
  line = ''
  for i in range (j + 1):
      line += ' {:n}'.format(i)   # this defines the formatting of each row by adjusting the number of columns, the :n limits again limits the number of columns to the range of n,
    print(line)                          # .format(i) defines the numbers in each column, in this case the column is defined by i which is j + 1, so each consecutive column will add one to it giving us the sequence of numbers instead of a singular number
                                         # the space before {:n} inserts a space between each number, then the line is printed





# Code 4.2

n = int(input("Enter n: "))
m = int(input("Enter m: "))

for j in range(n):                # defines the number of rows (j) in respect to n (3)
    line = ''
    for i in range(m):            # nested loop defines the number of columns (i) in respect to m (2)
        line += '{}'.format('*')  # this ensures the row will print symbol *
    print(line)                   # print the line then repeat the loop
print('\n')                       # separates each output with a blank line


for j in range(n):                 # see above explanation
    line = ''
    for i in range(m):             # this nested loop defines the columns in respect to range of m, meaning there will only be two columns, 0 and 1
        line += ' {}'.format(j)  # .format(j) defines the numbers in each column as j which is a singular value in the range of n (either 0,1, or 2) respectively
    print(line)
print('\n')


for j in range(n):                 # see above explanation
    line = ''
    for i in range(m):             # this nested loop defines the columns in respect to range of n, meaning there will only be two columns, 0 and 1
        line += ' {}'.format(i)  # .format(i) defines the numbers in each column as i which is a singular value in the range of m (either 0 or 1) respectively
    print(line)
print('\n')


for j in range(n):                       # see above explanation
    line = ''
    for i in range(m):                   # this nested loop defines the columns in respect to range of m, meaning there will only be two columns, 0 and 1
        line += ' {}'.format(j * m + i)  # .format(j * m + i) defines the numbers in each column as j (0,1,2) multiplies it by m (2) then adds i (0,1) to it in respect the the position in the row and column
    print(line)                              # NOTE - i and j represent position and values withing m and n respectively
print('\n')




# Code 5

results = []
for i in range(1, 101):
    prime = True
    for j in range(2, i//2 + 1):
        if i % j == 0:               # this is the definition of a prime number, if i is divisible by j at any point it is not prime
            prime = False
    if prime:                        # now we only include the prime number in this if statement (prime must be true)
        results.append(i)            # if it is prime, we add (append) the value (i) to the results list
print(results)
